def is_katrain_file(file_path: str):
    """Returns True if the .sgf file was generated by KaTrain."""
    KEY = "SGF generated by KaTrain"
    with open(file_path, "r", encoding="utf-8") as file:
        for line in file:
            return KEY in line


def create_cleaned_katrain_file(in_path: str, out_path: str):
    """Writes a .sgf to file that sgf2anim can read."""
    contents = []
    with open(in_path, "r", encoding="utf-8") as in_file:
        TERM = "ㅤ​];"  # every move begins with this term.
        line_num = 0
        for line in in_file:
            if line_num == 0:
                # the first line might need to have its first move extracted.
                clean_line = line.strip()

                black_starts = True
                header_added = False

                # looks for the first move in the line.
                pb_tag_start = clean_line.find("PB[")
                first_tag_start = clean_line.find("B[", pb_tag_start + 3)
                if first_tag_start == -1:
                    pw_tag_start = clean_line.find("PW[")
                    first_tag_start = clean_line.find("W[", pw_tag_start + 3)
                    if first_tag_start >= 0:
                        black_starts = False

                if first_tag_start >= 0:
                    first_tag_end = clean_line.find("]", first_tag_start)
                    if first_tag_end >= 0:
                        # a first move is embedded in the first line,
                        # so the program removes it.
                        first_move = clean_line[first_tag_start : first_tag_end + 1]
                        clean_line = (
                            clean_line[:first_tag_start]
                            + clean_line[first_tag_end + 1 :]
                        )

                        # removes junk from header
                        kt_tag_start = clean_line.find("KT[")
                        clean_line = clean_line[:kt_tag_start]

                        # the header is added and then the first move.
                        contents.append(clean_line)
                        contents.append(";" + first_move)
                        header_added = True

                if not header_added:
                    # removes junk from header and adds it to the file.
                    kt_tag_start = clean_line.find("KT[")
                    clean_line = clean_line[:kt_tag_start]
                    contents.append(clean_line)

            elif line.startswith(TERM):
                # any line beginning with the TERM will contain a move.
                clean_line = ";" + line[len(TERM) : len(TERM) + 5].strip()
                contents.append(clean_line)

            line_num += 1
        contents.append(";)")  # closes out the file's structure.

    # writes each processed line to a new separate .sgf file.
    with open(out_path, "w", encoding="utf-8") as out_file:
        for c in contents:
            clean = c.strip()
            out_file.write(clean + "\n")
